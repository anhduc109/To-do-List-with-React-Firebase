{"version":3,"sources":["components/Note.jsx","components/NoteForm.jsx","Config/config.js","App.js","serviceWorker.js","index.js"],"names":["Note","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","noteContent","noteId","handleRemoveNote","bind","assertThisInitialized","id","removeNote","_this2","react_default","a","createElement","className","onClick","Component","NoteForm","state","newNoteContent","handleUserInput","writeNote","e","setState","target","value","preventDefault","addNote","onSubmit","placeholder","required","onChange","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","firebase","initializeApp","database","ref","child","notes","previousNotes","on","snap","push","key","val","i","length","splice","note","catchNote","trim","set","console","log","remove","_this3","map","components_Note","components_NoteForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNA+BeA,cA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcR,EAAMQ,YACzBP,EAAKQ,OAAST,EAAMS,OAEpBR,EAAKS,iBAAmBT,EAAKS,iBAAiBC,KAAtBT,OAAAU,EAAA,EAAAV,CAAAD,IALTA,gFAQFY,GACbT,KAAKJ,MAAMc,WAAWD,oCAGlB,IAAAE,EAAAX,KACJ,OACIY,EAAAC,EAAAC,cAAA,OAAKC,UAAY,eACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAef,KAAKI,aACjCQ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,QAAS,kBAAML,EAAKL,iBAAiBK,EAAKN,UAAxE,gBAlBGY,aC2CJC,cA3CX,SAAAA,EAAYtB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACfrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KAEDuB,MAAQ,CACTC,eAAgB,IAGpBvB,EAAKwB,gBAAkBxB,EAAKwB,gBAAgBd,KAArBT,OAAAU,EAAA,EAAAV,CAAAD,IACvBA,EAAKyB,UAAYzB,EAAKyB,UAAUf,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IARFA,+EAWH0B,GACZvB,KAAKwB,SAAS,CACVJ,eAAgBG,EAAEE,OAAOC,0CAKvBH,GAENA,EAAEI,iBAEF3B,KAAKJ,MAAMgC,QAAQ5B,KAAKmB,MAAMC,gBAE9BpB,KAAKwB,SAAS,CACVJ,eAAgB,sCAKpB,OACIR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcc,SAAU7B,KAAKsB,WACzCV,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACjBe,YAAY,sBACZC,UAAQ,EACRL,MAAO1B,KAAKmB,MAAMC,eAClBY,SAAUhC,KAAKqB,kBACfT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,oBAtCOE,8BCFVgB,EAAY,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,uCCgGIC,6BA7Fb,SAAAA,EAAY7C,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IAChB5C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAtC,KAAAH,KAAMJ,KAEDgC,QAAU/B,EAAK+B,QAAQrB,KAAbT,OAAAU,EAAA,EAAAV,CAAAD,IACfA,EAAKa,WAAab,EAAKa,WAAWH,KAAhBT,OAAAU,EAAA,EAAAV,CAAAD,IAElBA,EAAK4C,IAAMC,IAASC,cAAcV,GAClCpC,EAAK+C,SAAW/C,EAAK4C,IAAIG,WAAWC,MAAMC,MAAM,SAEhDjD,EAAKsB,MAAQ,CACX4B,MAAO,IAVOlD,oFAcE,IAAAc,EAAAX,KACZgD,EAAgBhD,KAAKmB,MAAM4B,MAGjC/C,KAAK4C,SAASK,GAAG,cAAe,SAAAC,GAC9BF,EAAcG,KAAK,CACjB1C,GAAIyC,EAAKE,IACThD,YAAa8C,EAAKG,MAAMjD,cAG1BO,EAAKa,SAAS,CACZuB,MAAOC,MAIXhD,KAAK4C,SAASK,GAAG,gBAAiB,SAAAC,GAChC,IAAI,IAAII,EAAE,EAAGA,EAAGN,EAAcO,OAAQD,IACjCN,EAAcM,GAAG7C,KAAOyC,EAAKE,KAC9BJ,EAAcQ,OAAOF,EAAG,GAI5B3C,EAAKa,SAAS,CACZuB,MAAOC,sCAOLS,GAMN,IAAMC,EAAYD,EAAKE,OACL,KAAdD,GAAoBA,EAAUH,QAAU,KAC1CvD,KAAK4C,SAASO,OAAOS,IAAI,CAAExD,YAAaqD,uCAKjCpD,GACTwD,QAAQC,IAAIzD,GACZL,KAAK4C,SAASE,MAAMzC,GAAQ0D,0CAIrB,IAAAC,EAAAhE,KACP,OACEY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,qCAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbf,KAAKmB,MAAM4B,MAAMkB,IAAI,SAACR,GACpB,OACE7C,EAAAC,EAAAC,cAACoD,EAAD,CACA9D,YAAaqD,EAAKrD,YAClBC,OAAQoD,EAAKhD,GACb2C,IAAOK,EAAKhD,GACZC,WAAcsD,EAAKtD,gBAMzBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACqD,EAAD,CAAUvC,QAAS5B,KAAK4B,mBAvFhBX,cCIEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa917ff0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Note extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.noteContent = props.noteContent;\r\n        this.noteId = props.noteId;\r\n\r\n        this.handleRemoveNote = this.handleRemoveNote.bind(this);\r\n    }\r\n\r\n    handleRemoveNote(id){\r\n        this.props.removeNote(id);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"note fadeIn\">\r\n                <p className=\"noteContent\">{this.noteContent}</p>\r\n                <span className=\"closeButton\" onClick={() => this.handleRemoveNote(this.noteId)}>&times;</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n Note.propTypes = {\r\n     noteContent: PropTypes.string\r\n }\r\n\r\nexport default Note;","import React, {Component} from 'react';\r\n\r\nclass NoteForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            newNoteContent: '',\r\n        };\r\n\r\n        this.handleUserInput = this.handleUserInput.bind(this);\r\n        this.writeNote = this.writeNote.bind(this);\r\n    }\r\n\r\n    handleUserInput(e) {\r\n        this.setState({\r\n            newNoteContent: e.target.value,\r\n        })\r\n    }\r\n\r\n    //Set new note content to empty string\r\n    writeNote(e){\r\n\r\n        e.preventDefault();\r\n        \r\n        this.props.addNote(this.state.newNoteContent);\r\n\r\n        this.setState({\r\n            newNoteContent: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <form className=\"formWrapper\" onSubmit={this.writeNote}>\r\n                <input className=\"noteInput\"\r\n                placeholder=\"Write a new note...\"\r\n                required\r\n                value={this.state.newNoteContent}\r\n                onChange={this.handleUserInput}/>\r\n                <button className=\"noteButton\">Add Note</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NoteForm;","export const DB_CONFIG = {\r\n    apiKey: \"AIzaSyCY901TLGDK9V9TcT_83EGJ8rW2G4h7eEg\",\r\n    authDomain: \"react-notes-duc.firebaseapp.com\",\r\n    databaseURL: \"https://react-notes-duc.firebaseio.com\",\r\n    projectId: \"react-notes-duc\",\r\n    storageBucket: \"react-notes-duc.appspot.com\",\r\n    messagingSenderId: \"310608388325\",\r\n    appId: \"1:310608388325:web:889805adfd20a140\"\r\n};\r\n","import React, {Component} from 'react';\nimport Note from './components/Note';\nimport NoteForm from './components/NoteForm';\nimport firebase from 'firebase/app';\nimport { DB_CONFIG } from './Config/config';\nimport 'firebase/database';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.addNote = this.addNote.bind(this);\n    this.removeNote = this.removeNote.bind(this);\n\n    this.App = firebase.initializeApp(DB_CONFIG);\n    this.database = this.App.database().ref().child('notes');\n\n    this.state = {\n      notes: [],\n    }\n  }\n\n  componentWillMount(){\n    const previousNotes = this.state.notes;\n\n    //Pass data to database\n    this.database.on('child_added', snap => {\n      previousNotes.push({\n        id: snap.key,\n        noteContent: snap.val().noteContent,\n      })\n\n      this.setState({\n        notes: previousNotes\n      })\n    })\n\n    this.database.on('child_removed', snap => {\n      for(var i=0; i< previousNotes.length; i++) {\n        if(previousNotes[i].id === snap.key){\n          previousNotes.splice(i, 1);\n        }\n      }\n\n      this.setState({\n        notes: previousNotes\n      })\n    })\n  }\n\n  //Push notes to the note array\n  //Create 'child_added' event using addNote method\n  addNote(note){\n    // const previousNote = this.state.notes;\n    // this.state.notes.push({id: previousNote.length + 1, noteContent: note});\n    // this.setState({\n    //   notes: previousNote\n    // })\n    const catchNote = note.trim();\n    if (catchNote !== \"\" && catchNote.length <= 255) {\n      this.database.push().set({ noteContent: note });\n    }\n  }\n\n  //Create 'child_removed' event using removeNote method\n  removeNote(noteId){\n    console.log(noteId);\n    this.database.child(noteId).remove();\n  }\n\n  \n  render() {\n    return (\n      <div className=\"notesWrapper\">\n        <div className=\"notesHeader\">\n          <div className=\"heading\">To-do list with React & Firebase</div>\n        </div>\n        \n        <div className=\"notesBody\">\n        {\n          this.state.notes.map((note) => {\n            return (\n              <Note \n              noteContent={note.noteContent} \n              noteId={note.id} \n              key = {note.id}\n              removeNote = {this.removeNote}/>\n            )\n          })\n        }\n        </div>\n        \n        <div className=\"notesFooter\">\n          <NoteForm addNote={this.addNote} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}